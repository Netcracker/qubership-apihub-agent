// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/document.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSpecService is a mock of SpecService interface.
type MockSpecService struct {
	ctrl     *gomock.Controller
	recorder *MockSpecServiceMockRecorder
}

// MockSpecServiceMockRecorder is the mock recorder for MockSpecService.
type MockSpecServiceMockRecorder struct {
	mock *MockSpecService
}

// NewMockSpecService creates a new mock instance.
func NewMockSpecService(ctrl *gomock.Controller) *MockSpecService {
	mock := &MockSpecService{ctrl: ctrl}
	mock.recorder = &MockSpecServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpecService) EXPECT() *MockSpecServiceMockRecorder {
	return m.recorder
}

// GetServiceDocument mocks base method.
func (m *MockSpecService) GetDocumentById(namespace, serviceId, specId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentById", namespace, serviceId, specId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceSpecification indicates an expected call of GetServiceSpecification.
func (mr *MockSpecServiceMockRecorder) GetServiceSpecification(namespace, serviceId, specId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentById", reflect.TypeOf((*MockSpecService)(nil).GetDocumentById), namespace, serviceId, specId)
}
